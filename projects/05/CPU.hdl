// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.

<<<<<<< HEAD
        //decoder
        Not(in=instruction[15], out=insA);
        And16(a=instruction[0..15], b=insA, out=inA);
        And16(a=instruction[0..15], b=instruction[15], out=outIns);
        
=======
    //decoder
        //circleC instruction
        //Pin of select instruction[0..15] or outALU
        Not(in=instruction[15], out=MuxAIns);
        //Load A register
        Or(a=MuxAIns, b=instruction[5], out=LoadA);
        //Select A or M
        Or(a=instruction[12], b=false, out=SelAM);
        //Load D register
        Or(a=instruction[1], b=false, out=LoadD);
        //Load M
        Or(a=instruction[3], b=false, out=LoadM);
        //address M
        Or16(a=outA, b=false, out=);
>>>>>>> d45885001b99e75ac9fac55195704c921e20614e


        //jump address
        //plus by zero NOR minus
        Or(a=zr, b=ng, out=outs);
        Not(in=outs, out=plus);
        //plus flag
        Bit(in=plus, load=true, out=plusf);
        //zero flag
        Bit(in=zr, load=true, out=zerof);
        //sign flag
        Bit(in=ng, load=true, out=singf);

        //when minus
        And(a=instruction[2], b=singf, out=jlt);
        //when zero
        And(a=instruction[1], b=zerof, out=jeq);
        //when plus
        And(a=instruction[0], b=plusf, out=jgt);
        //when zero "以上"
        Or(a=plusf, b=zerof, out=zeroup);
        And(a=instruction[1], b=instruction[0], out=jge1);
        And(a=zeroup, b=jge1, out=jge);
        //when not zero
        And(a=instruction[0], b=instruction[2], out=jne1);
        Not(in=zerof, out=ez);
        And(a=jne1, b=ez, out=jne);
        //when low zero


<<<<<<< HEAD
        //ALU
        ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zr, ng=ng);
        
        //loadA
        Or(a=insA, b=instruction[5], out=loadA);
        //loadD
        Or(a=instruction[4], b=false, out=loadD);
        //loadM
        Or(a=instruction[3], b=false, out=writeM);
        
        //addressM
        sixtTofift(in=outA, out=addressM[0..14]);

=======

    //ALU
    ALU(x=, y=, zx=, nx=, zy=, ny=, f=, no=, out=, zr=zr, ng=ng);
>>>>>>> d45885001b99e75ac9fac55195704c921e20614e
}
