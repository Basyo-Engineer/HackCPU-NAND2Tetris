// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.
        
        //C instruction
        And(a=instruction[15], b=instruction[12], out=selAM);
        And(a=instruction[15], b=instruction[11], out=zx);
        And(a=instruction[15], b=instruction[10], out=nx);
        And(a=instruction[15], b=instruction[9], out=zy);
        And(a=instruction[15], b=instruction[8], out=ny);
        And(a=instruction[15], b=instruction[7], out=f);
        And(a=instruction[15], b=instruction[6], out=no);

        And(a=instruction[15], b=instruction[5], out=d1);
        And(a=instruction[15], b=instruction[4], out=d2);
        And(a=instruction[15], b=instruction[3], out=d3);
        And(a=instruction[15], b=instruction[2], out=j1);
        And(a=instruction[15], b=instruction[1], out=j2);
        And(a=instruction[15], b=instruction[0], out=j3);

        //jump address
        //plus by zero NOR minus
        Or(a=zr, b=ng, out=outs);
        Not(in=outs, out=plus);
        //plus flag
        Bit(in=plus, load=true, out=plusf);
        //zero flag
        Bit(in=zr, load=true, out=zerof);
        //sign flag
        Bit(in=ng, load=true, out=singf);

        //when minus
        And(a=j1, b=singf, out=jlt);
        //when zero
        And(a=j2, b=zerof, out=jeq);
        //when plus
        And(a=j3, b=plusf, out=jgt);
        //when zero "以上"
        Or(a=plusf, b=zerof, out=zeroup);
        And(a=j2, b=j3, out=jge1);
        And(a=zeroup, b=jge1, out=jge);
        //when not zero
        And(a=j1, b=j3, out=jne1);
        Not(in=zerof, out=ez);
        And(a=jne1, b=ez, out=jne);
        //when low zero
        And(a=j1, b=j2, out=jle1);
        Or(a=zerof, b=singf, out=jle2);
        And(a=jle1, b=jle2, out=jle);
        //jump
        And(a=j1, b=j2, out=jmp1);
        And(a=jmp1, b=j3, out=jmp);

        Or(a=jgt, b=jeq, out=jins1);
        Or(a=jge, b=jlt, out=jins2);
        Or(a=jne, b=jle, out=jins3);
        Or(a=jins1, b=jins2, out=jins4);
        Or(a=jins3, b=jmp, out=jins5);
        Or(a=jins4, b=jins5, out=loadPC);

        //PC
        PC(in=outA, load=loadPC, inc=true, reset=reset, out=outpc);
        sixtTofift(in=outpc, out=PC[0..14]);

        //instruction A
        Not(in=instruction[15], out=insA);
        oneToSixt(in=insA, out=insAs);
        And16(a=instruction[0..15], b=insAs, out=inA);

        //select outALU or instruction
        Mux16(a=outALU b=inA, sel=insA, out=inA);
        //A reg
        Register(in=inA, load=loadA, out=outA);     
        
        //D reg
        Register(in=outALU, load=loadD, out=outD);

        //select A or M
        Mux16(a=outA, b=inM, sel=selAM, out=outAM);

        //ALU
        ALU(x=outD, y=outAM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outALU, zr=zr, ng=ng);
        Or16(a=outALU, b=false, out=outM[0..15]);
        //decoder

        //loadA
        Or(a=insA, b=d1, out=loadA);
        //loadD
        Or(a=d2, b=false, out=loadD);
        //loadM
        Or(a=d3, b=false, out=writeM);
        
        //addressM
        sixtTofift(in=outA, out=addressM[0..14]);

}
